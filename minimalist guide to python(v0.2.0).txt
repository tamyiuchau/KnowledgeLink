"""
|Non-minimalist preface (can be ignored)
Python is one of the most beautifully designed language.
Simple and Clear and Obvious. It is my first programming language,
and I managed to learn it in a weekend. This tutorial as
aims to further shorten the time to matter of hours,
by remove unnecessary materials in documentations, primer, stackoverflow answers and blogs,
keeping the noise to signal ratio as low as possible,
while covering every edge case possible.

Not every module included in python distribution (aka Standard Library)
will be discussed
Best practice and rational behind will not be discussed.
(Maybe write about this latter)
In case you have trouble on this book, ask me, either through traditional
mail list: minpy@googlegroups.com , forum: https://groups.google.com/d/forum/minpy or
telegram: telegram.me/minpy
Please don't repost, cause I want to keep track on the schedule
Presently ~300 lines excluding comment and execution result
"""

"""
|How to use this book
Read, predict, type and run, check answer, ask me if you can't understand
(cause it is my problem and i have the responsibility to deal with it)
"""
"""
|Addtional guide to BNF grammar used as reference

#Assignment and
a=1
print(a)
#1
print(Cd3)
#Traceback (most recent call last):
#  File "<pyshell#2>", line 1, in <module>
#    Cd3
#NameError: name 'Cd3' is not defined
B2,cD3,Cd3,__internal__= 2,3.0 , 8/2,2**3
print(B2)
#2
print(cD3,Cd3)
#3.0 4.0
#case sensitive
3cd = 5
#SyntaxError: invalid syntax
#cannot start with number
del Cd3
print(Cd3)
#Traceback (most recent call last):
#  File "<pyshell#8>", line 1, in <module>
#    Cd3
#NameError: name 'Cd3' is not defined
e=f=a
print(e,f,a)
#1 1 1
E=a*B2-cD3/4
print(E)
#1.25
print(a)
#1
a+=1
print(a)
#2
a-=1
a*=2
a/=2


h="hello"
g='world'
print(h+" "+g)
#hello world
print(h.count(),len(h))
print("wor" in g)
print("" in g)
print(h.index("el"))
print(h.index("l"))
print(h.index("j"))
print(h.find("l"))
print(h.find("j"))
print("{0},{2},{1}".format(1,2,3))

print(cD2)
x=1
y=2.0
z=3
print(True and False, True or False, not True)
if True:
    print(True)
if False:
    print("This will not execute, ie print")
if x<y:
  print("x<y")
elif x>y: #elif->else if
  print("y<x")
else: print("x=y")
print(x+y==3,1.0==1)
print(x<=y<z)#a<=b -> a<b or a==b
i=1
while i<9:
    print(i)
end=9
for i in range(end):
    print(i)
start=1
for i in range(start,end):
    print(i)
start,end,step=0,-10,-2
for i in range(start,end,step):
    print(i)


a=[1,2,3,4,5]
print(a)
print([1,2.0,"3",[4,[[5],[6]],[],{},set()]])
print(first)
print(rest)
print(last)
print(a[0])
print(a[-1])
print(a[5])
print(a[1:3])
print(a[1:])
print(a[:-1])
print(a[a[0]:-2])
print(a[0:4:2])
print(a==a[:]==a[::])
print(a[::-1])
print("trade"[-1::-1])
print([1,[[[2],[3]],4]][1][0][1])
b=[7.0,6,8.0,5]
b.sort()
print(b)
b[0]=4
print(b)
print(len(b))
print(len(b)==b.count())
b[:len(b)]=[9]
b[::-2]=[1,2,3]
print(b)
c=a
a.append(6)
print(a,c)
d,e=[6,7]
print(d,e)
a.extend([d,e])
print(a)
g=a.pop()
print(g)
f=a.index(4)
print(f,a[f])
a.remove(4)
print(a)
a.insert(f,4)
print(a)
g=" :) ".join(a)
print(g)
print(g.split(" :) "))
g[0]=0
del g[0]

a=(1,2,3,4)

a=[]
b=9
while b>=0:
  a.append(b)
  print(a)
  b-=1
for i in a:
  print(i)
for i in range(9):
  print(i)
c=zip(a,range(len(a)))
for i,j in c:
    print(i,j)
c=[i*2 for i in a]
print(c)
d=[i*2 for i in a if i<=5]
print(d)

a=(1,2,3)
print(a[::])
a[0]=0
del a[0]

a=set([1,1,2,3,6.0/2,"3"])
print(a)
print(len(a))
print(3 in a)
print(4 in a)
print(4 not in a)
b={2,3,4}
c={2,3}
print(a.union(b,c),a|b|c)
print(a.intercept(b),a&b)
print(a.difference(b),a-b)
print(a.symmetric_differnce(b),a^b)
b.add(5)
print(b)
b.remove(5)
print(b)
b.remove(5)
b.add(5)
b.discard(5)
print(b)
b.discard(5)
b|={5}
print(b)
b.remove(5)
b.update({5})
print(b)
print(a.issuperset(c),a>c)
print(c.issubset(a),c<a)
c|={4,5}
print(b,c,b==c)
for i in c:
    print(i)
e={i**2 for i in c if i<=3} #from python 2.7 and 3.0 onwards
print(e)


a={'one':1 , 'two': 2,'three': 3 }
b=dict(one=1,two=2,three=3)
c=dict(zip(['one','two','three'],[1,2,3]))
d=dict([('two',2),('one',1),('three',3)])
e=dict({'three':3,'one':1,'two':2})
print(a=b=c=d=e)
print(a["two"],a.get("two"))
print(a["four"])
a["two"]=4
print(a)
del a["two"]
print(a)
f=[0.5:0.5,1:1,"2":2]
print(f[0.5],f[1],f[2])
print(a.keys())
print("four" in a,a.has_key("four"))
print("four" not in a)
print(a)
print(a.pop("one"))
print(a)
a.update({"one":1,"five":5})
print(a)
for k,v in b.items():
    print(k,v)
g={k:v*2 for k,v in b.items()}#from python 2.7 and 3.0 onwards
#dict:setattr


#open a new console
print(globals())
print(locals())
a=1
print(globals())
print(locals())
def f():
    print(globals())
    print(locals())
    a=2
    print(a)
    print(globals())
    print(locals())
    return a
b=f()
print(a,b)
def f():
    print(globals())
    print(locals())
    global a
    a=2
    print(a)
    print(globals())
    print(locals())
f()
print(a,b)
def factorial(n):
    print(n)
    if n==1:
        return n
    else:
        return n*factorial(n-1)
print(factorial(3))

def name_age_sex(name,age=0,sex="not avaliable"):
    print(name,age,sex)
name_age_sex()
name_age_sex("apple")
name_age_sex(name="apple")
name_age_sex("apple",sex="male")
name_age_sex("pineapple",2,"female")
print(add(2,3))
#function: *args,**kwargs
def print_all(arg,*args,**kwargs):
    print("first value",arg)
    print("rest value",args)
    print("keyword arguments->dict:",kwargs)
print_all(1,2,3,four=4,five=5)
print_all(*[1,2,3],**{"four":4,"five":5})
first,*rest,last=[1,2,3,4,5]#since python 3.0
#function:passing function as parameter
def mapper(fn,args):
    return [fn(i) for i in args]
for i in mapper(factorial,range(3))):
    print(i)
for i in map(factorial,range(3))):
    print(i)
#function:lambda
for i in map(lambda x:x**2,range(5)):
    print(i)
permutation=lambda n,r:factorial(n)/factorial(n-r)
permutation(4,2)
#function:decorator

#Warning!:incomplete
#open a new console
class A:
    pass
print(dir(A))
a=A()
print(dir(a))
class Bird:
    Class="aves"#generally used only for constant
    def __init__(self,name="noname"):
        self.name=name
    def flap(self):
        print(self.name+"flap its wing")
print(dir(Bird))
b=Bird()
print(dir(b))
print(b.Class)
b.flap()
class Chicken(Bird):
    Family="Phasianidae"
    def __init__(self,name="noname",owner=None):
        self.owner=owner
        super(Chicken,self).__init__(name)
    def flap(self):
        print("Chicken"+self.name+"flap its wing")
print(dir(Chicken))
b=Chicken()
print(dir(b))
print(b.Class)
b.flap()

#class:multiple inherence
#class:bound/unbound method
#class:magic:compare,itertor,dictionary
#incomplete:fuction,class,error,debug,import,pip,file
